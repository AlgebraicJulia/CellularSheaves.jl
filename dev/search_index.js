var documenterSearchIndex = {"docs":
[{"location":"generated/literate_example/#Code-Example","page":"Code Example","title":"Code Example","text":"","category":"section"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"This is an example of adding a code example compiled with Literate.jl in the docs.","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"First we want to load our package with using","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"using CellularSheaves\nusing LinearAlgebra","category":"page"},{"location":"generated/literate_example/#Using-the-Package","page":"Code Example","title":"Using the Package","text":"","category":"section"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"Here is a simple example of creating a sheaf using the @cellular_sheaf macro.","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"A = [1.0 0.0 1.0 0.0]\nB = [1.0 0.0 0.0 1.0]\nC = [1.0 0.0 0.0 0.0]\n\nsheaf = @cellular_sheaf A, B, C begin\n    x::Stalk{4}, y::Stalk{4}, z::Stalk{4}\n\n    A(x) == B(y)\n    A(x) == C(z)\n    B(y) == C(z)\n\nend","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"Let's compute a global section of this sheaf. We start with a random 0-cochain:","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"x0 = rand(sum(vertex_stalks(sheaf)))\n\nglobal_section = nearest_global_section(sheaf, x0)","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"Now we can check that this is indeed a global section by verifying that the coboundary map applied to it is zero.","category":"page"},{"location":"generated/literate_example/","page":"Code Example","title":"Code Example","text":"d = coboundary_map(sheaf)\n\nnorm(d * global_section)","category":"page"},{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/#CellularSheaves.CellularSheaves","page":"Library Reference","title":"CellularSheaves.CellularSheaves","text":"CellularSheaves.jl is a Julia package for working with cellular sheaves and sheaf Laplacians.\n\n\n\n\n\n","category":"module"},{"location":"#CellularSheaves.jl","page":"CellularSheaves.jl","title":"CellularSheaves.jl","text":"","category":"section"},{"location":"","page":"CellularSheaves.jl","title":"CellularSheaves.jl","text":"CellularSheaves.jl is a Julia library for working with cellular sheaves and sheaf Laplacians.","category":"page"}]
}
